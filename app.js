//array containing info for currently selected data
var dataArray=[]; 
//array containing info for currently selected data for the preceding year (for sphere rotation purposes)
var dataArray1=[]; 
//array containing percentage change between current year and precedent one (for sphere rotation purposes)
var change=[]; 
//array containing a list of names of countries currently in the scene (for deugging purposes)
var currentCountries=[]; 
//initialize variables for data modes (year, indicator, proportionality, camera mode,)
var currentYear = '2013';
var currentSizeMode = 'volume';
var currentIndicator = 'GDP PPP';
var cameraMode;
//years container for autocomplete
var years=[];
//country names container for autocomplete
var countryNames=[];
//objects(spheres) conainer
var spheres=[];
// boolean that indicates loaded data
var ready=false;
//default radius
var radius=5;
//booleans indicating whether animation of 2 or 3 or none should be started
var animate2 = false;
var animate3 = false;
//global constant (gravity constant adjusted to handled data)
var G =0.0001;
//time interval between calculations (1/frame rate, so that the virtual time matches real one)
var h =0.0016;
//container for all countries
var countries=[];
//the number of spheres in the scene
var number = 0;
//useless for now
var index;
//global variables about maximum and minimum year range
var MINYEAR=1959;
var MAXYEAR=2013;
$('body').append('<div id ="loading"><div id="loadingfield">DATA IS LOADING, PLEASE WAIT!<br>Welcome to GDP Planet! The app is loading, but in the meantime you can familiarize yourself with it:<ul><li>Input the countries you want to compare in top right corner. Delete them with the button just below.</li><li>On the left side you can select the indicator and the year</li><li>On the right side, you can select whether the size of the planets is proportional to the radius or to the volume.</li><li>Click ANIMATE to animate. You will need either two or three planets to do that. Click again to stop animating.</li><li>Spin of planets proportional to the yearly change in the given index value</li></div><div id="loadimg"><img src="http://sierrafire.cr.usgs.gov/images/loading.gif" alt="The official HTML5 Icon"></div></div>')
// $(function(){
//     $('#addButton').on('click',function(){
//         //var r= $('<input type="button" value="new button"/>');
//         $('#countrybox').append($('<div id="countryadd"><button id="countryinfo">'+$('#theInput').val()+'</button><button id="delButton">-</button></div>'));
//     });
// });

function CreateYearsArray(){

	for(i=0;i<54;i++)		
		years.push((1960 + i).toString());
}

function createObjects(){
	var flagURL = 'https://www.kimonolabs.com/api/6717tens?apikey=G0jm2jDCpLxxnM8gtev7PxM9Fk7cKsng';
	$.ajax({
		url: flagURL,
		type: 'GET',
		dataType: 'jsonp',
		error: function(data){
			console.log("Oh no");
		},
		success: function(data){
			console.log('huj');

			//fill the countrynames list with country names

			for (var i=0; i<data.results.collection1.length; i++) {

				if (data.results.collection1[i].property1.alt.indexOf(' the ') != -1){
					//countries.push(flagArray[i].property1.alt.slice(12));
					var obj = jQuery.parseJSON( '{"name": "' + data.results.collection1[i].property1.alt.slice(12)+'"}');
					countries.push(obj);
					countryNames.push(correctCountryName(data.results.collection1[i].property1.alt.slice(12)));
				}
				else{
					//countries.push(flagArray[i].property1.alt.slice(9));
					var obj = jQuery.parseJSON( '{"name": "' + data.results.collection1[i].property1.alt.slice(9)+'"}');
					countries.push(obj);
					countryNames.push(correctCountryName(data.results.collection1[i].property1.alt.slice(9)));
			}
			}

			//correct errors generated by retarded kimono api or rather retarded wikipedia formatting
			correctCountryNames(countries);
			console.log(countries);

			//create counries objects with the given format (with physics, half, flag, ind, wbname components)
			for (var i=0; i<countries.length; i++){	
				
				var link = data.results.collection1[i].property1.src;
				//solve the issue with the flag of Congo
				if (countries[i] == 'Republic of the Congo'){
					link = 'http://upload.wikimedia.org/wikipedia/commons/9/92/Flag_of_the_Republic_of_the_Congo.svg'
				}
				countries[i].flagURL=link;
				countries[i].ind={};
				countries[i].wbname=convertCountryNames(countries[i].name);

				countries[i].physics={
					a:{},
					v:{},
					p:{},
				};

				countries[i].half={
					a:{},
					v:{},
					p:{},
				}
			}

			console.log(countries);
			console.log('10%');
			
			//get info from world bank api
			getIndicatorData();
			
		}
			
	});
}

function getIndicatorData(){


	for (var j =0;j<countries.length;j++){

		countries[j].ind={
			"GDP PPP": {},                    	//NY.GDP.MKTP.CD
			"GDP PPP per capita": {},					//NY.GDP.PCAP.CD
			"Total Population": {},			//SP.POP.TOTL
			"Foreign Direct Investment": {},//BX.KLT.DINV.CD.WD
			"CO2 Emissions": {},			//EN.ATM.CO2E.PC
			"Urban Population Proportion": {},		//SP.URB.TOTL.IN.ZS
			"Unemployment": {},				//SL.UEM.TOTL.ZS
			"Life Expectancy": {},			//SP.DYN.LE00.IN
			"Land Area": {},				//AG.LND.TOTL.K2
			"Proportion of seats held by women in national parliaments Proportion": {}     //SG.GEN.PARL.ZS

		}
	}

	$.ajax({
	  	url: "http://api.worldbank.org/en/countries/all/indicators/NY.GDP.MKTP.CD?per_page=14000&date=1960:2014&format=jsonp",
	  	type: 'GET',
	  	dataType: 'jsonp',
	  	jsonp: 'prefix',
	  	jsonpCallback: 'getjsondata',

			error: function(data){
				console.log("Error");
			},
			success: function(data){

				for (var j =0;j<countries.length;j++){
					// 	// console.log('huj')
						for (var k=0;k<data[1].length;k++){
					// 		//
					 		if(countries[j].wbname==data[1][k].country.value){
					 			var date = data[1][k].date;
					// 			// console.log(date)
					 			countries[j].ind['GDP PPP'][date] = data[1][k].value;

							}
						
						}	
				}

				for (var i =0; i<countries.length;i++){
					if (jQuery.isEmptyObject(countries[i].ind['GDP PPP'])){
						console.log(countries[i]);
						countries.splice(i, 1);
						countryNames.splice(i, 1);
					}
				}



				console.log('20%');
				getGDPperCapita()
			}
		



		});
};
 
function getGDPperCapita(){

	$.ajax({
	  	url: "http://api.worldbank.org/en/countries/all/indicators/NY.GDP.PCAP.CD?per_page=14000&date=1960:2014&format=jsonp",
	  	type: 'GET',
	  	dataType: 'jsonp',
	  	jsonp: 'prefix',
	  	jsonpCallback: 'getjsondata',

			error: function(data){
				console.log("Error");
			},
			success: function(data){

				for (var j =0;j<countries.length;j++){
					// 	// console.log('huj')
						for (var k=0;k<data[1].length;k++){
					// 		//
					 		if(countries[j].wbname==data[1][k].country.value){
					 			var date = data[1][k].date;
					// 			// console.log(date)
					 			countries[j].ind['GDP PPP per capita'][date] = data[1][k].value;
					 		}
					 	}
				}
				console.log('30%');
				ready=true;
				getTotalPopulation();
			}
	});
};

function getTotalPopulation(){

	$.ajax({
	  	url: "http://api.worldbank.org/en/countries/all/indicators/SP.POP.TOTL?per_page=14000&date=1960:2014&format=jsonp",
	  	type: 'GET',
	  	dataType: 'jsonp',
	  	jsonp: 'prefix',
	  	jsonpCallback: 'getjsondata',

			error: function(data){
				console.log("Error");
			},
			success: function(data){

				for (var j =0;j<countries.length;j++){
					// 	// console.log('huj')
						for (var k=0;k<data[1].length;k++){
					// 		//
					 		if(countries[j].wbname==data[1][k].country.value){
					 			var date = data[1][k].date;
					// 			// console.log(date)
					 			countries[j].ind['Total Population'][date] = data[1][k].value;
					 		}
					 	}
				}
			console.log('40%');
			
			getFDI();
			}
			
	});
};

function getFDI(){

	$.ajax({
	  	url: "http://api.worldbank.org/en/countries/all/indicators/BX.KLT.DINV.CD.WD?per_page=14000&date=1960:2014&format=jsonp",
	  	type: 'GET',
	  	dataType: 'jsonp',
	  	jsonp: 'prefix',
	  	jsonpCallback: 'getjsondata',

			error: function(data){
				console.log("Error");
			},
			success: function(data){

				for (var j =0;j<countries.length;j++){
					// 	// console.log('huj')
						for (var k=0;k<data[1].length;k++){
					// 		//
					 		if(countries[j].wbname==data[1][k].country.value){
					 			var date = data[1][k].date;
					// 			// console.log(date)
					 			countries[j].ind['Foreign Direct Investment'][date] = data[1][k].value;
					 		}
					 	}
				}
			console.log('50%');
			getCO2();
			}

			
	});
};

function getCO2(){

	$.ajax({
	  	url: "http://api.worldbank.org/en/countries/all/indicators/EN.ATM.CO2E.PC?per_page=14000&date=1960:2014&format=jsonp",
	  	type: 'GET',
	  	dataType: 'jsonp',
	  	jsonp: 'prefix',
	  	jsonpCallback: 'getjsondata',

			error: function(data){
				console.log("Error");
			},
			success: function(data){

				for (var j =0;j<countries.length;j++){
					// 	// console.log('huj')
						for (var k=0;k<data[1].length;k++){
					// 		//
					 		if(countries[j].wbname==data[1][k].country.value){
					 			var date = data[1][k].date;
					// 			// console.log(date)
					 			countries[j].ind['CO2 Emissions'][date] = data[1][k].value;
					 		}
					 	}
				}
			console.log('60%');
			getUrbanPop();

			}
			
	});
};

function getUrbanPop(){

	$.ajax({
	  	url: "http://api.worldbank.org/en/countries/all/indicators/SP.URB.TOTL.IN.ZS?per_page=14000&date=1960:2014&format=jsonp",
	  	type: 'GET',
	  	dataType: 'jsonp',
	  	jsonp: 'prefix',
	  	jsonpCallback: 'getjsondata',

			error: function(data){
				console.log("Error");
			},
			success: function(data){

				for (var j =0;j<countries.length;j++){
					// 	// console.log('huj')
						for (var k=0;k<data[1].length;k++){
					// 		//
					 		if(countries[j].wbname==data[1][k].country.value){
					 			var date = data[1][k].date;
					// 			// console.log(date)
					 			countries[j].ind['Urban Population Proportion'][date] = data[1][k].value;
					 		}
					 	}
				}
			console.log('70%');
			getUnemployment();
			}
			
	});
};

function getUnemployment(){

	$.ajax({
	  	url: "http://api.worldbank.org/en/countries/all/indicators/SL.UEM.TOTL.ZS?per_page=14000&date=1960:2014&format=jsonp",
	  	type: 'GET',
	  	dataType: 'jsonp',
	  	jsonp: 'prefix',
	  	jsonpCallback: 'getjsondata',

			error: function(data){
				console.log("Error");
			},
			success: function(data){

				for (var j =0;j<countries.length;j++){
					// 	// console.log('huj')
						for (var k=0;k<data[1].length;k++){
					// 		//
					 		if(countries[j].wbname==data[1][k].country.value){
					 			var date = data[1][k].date;
					// 			// console.log(date)
					 			countries[j].ind['Unemployment'][date] = data[1][k].value;
					 		}
					 	}
				}
			console.log('80%');
			getLifeExpectancy();

			}
			
	});
};

function getLifeExpectancy(){

	$.ajax({
	  	url: "http://api.worldbank.org/en/countries/all/indicators/SP.DYN.LE00.IN?per_page=14000&date=1960:2014&format=jsonp",
	  	type: 'GET',
	  	dataType: 'jsonp',
	  	jsonp: 'prefix',
	  	jsonpCallback: 'getjsondata',

			error: function(data){
				console.log("Error");
			},
			success: function(data){

				for (var j =0;j<countries.length;j++){
					// 	// console.log('huj')
						for (var k=0;k<data[1].length;k++){
					// 		//
					 		if(countries[j].wbname==data[1][k].country.value){
					 			var date = data[1][k].date;
					// 			// console.log(date)
					 			countries[j].ind['Life Expectancy'][date] = data[1][k].value;
					 		}
					 	}
				}
			console.log('90%');
			$('#loading').remove();
			//getArea();
			}
			
	});
};

function getArea(){

	$.ajax({
	  	url: "http://api.worldbank.org/en/countries/all/indicators/AG.LND.TOTL.K2?per_page=14000&date=1960:2014&format=jsonp",
	  	type: 'GET',
	  	dataType: 'jsonp',
	  	jsonp: 'prefix',
	  	jsonpCallback: 'getjsondata',

			error: function(data){
				console.log("Error");
			},
			success: function(data){

				for (var j =0;j<countries.length;j++){
					// 	// console.log('huj')
						for (var k=0;k<data[1].length;k++){
					// 		//
					 		if(countries[j].wbname==data[1][k].country.value){
					 			var date = data[1][k].date;
					// 			// console.log(date)
					 			countries[j].ind['Land Area'][date] = data[1][k].value;
					 		}
					 	}
				}
			console.log('95%');
			getWomen();
			}
			
	});
};

function getWomen(){

	$.ajax({
	  	url: "http://api.worldbank.org/en/countries/all/indicators/SG.GEN.PARL.ZS?per_page=14000&date=1960:2014&format=jsonp",
	  	type: 'GET',
	  	dataType: 'jsonp',
	  	jsonp: 'prefix',
	  	jsonpCallback: 'getjsondata',

			error: function(data){
				console.log("Error");
			},
			success: function(data){

				for (var j =0;j<countries.length;j++){
					// 	// console.log('huj')
						for (var k=0;k<data[1].length;k++){
					// 		//
					 		if(countries[j].wbname==data[1][k].country.value){
					 			var date = data[1][k].date;
					// 			// console.log(date)
					 			countries[j].ind['Proportion of seats held by women in national parliaments (%)'][date] = data[1][k].value;
					 		}
					 	}
				}
			console.log('100%');
			}
			
	});
};

//reference the 'c' div for the three canvas
var canvas = document.getElementById("c");
//intitialize da renderer
var renderer = new THREE.WebGLRenderer({canvas: canvas});
//initialize da camera
var camera = new THREE.PerspectiveCamera( 20, 1, 1, 100000000 );
//initialize da scene
var scene = new THREE.Scene();
//var sphereGeo = new THREE.SphereGeometry(radius, 100, 100);
//initialize mouse controls of the camera
var controls = new THREE.OrbitControls(camera, renderer.domElement);
//initialize first light
var light = new THREE.DirectionalLight(0xE0E0FF, 1);
light.position.set(200, 500, 200);
scene.add(light);
//initialize second light
var light = new THREE.DirectionalLight(0xFFE0E0, 0.5);
light.position.set(-200, -500, -200);
scene.add(light);

//set initial camera position
camera.position.z = 800;
//create a background starfield
//create a geometry with huge radius so it covers whole background
var geometry  = new THREE.SphereGeometry(10000000, 32, 32)
// create the material, using a texture of startfield
var material  = new THREE.MeshBasicMaterial()
THREE.ImageUtils.crossOrigin = '';
material.map   = THREE.ImageUtils.loadTexture('https://upload.wikimedia.org/wikipedia/commons/4/4e/Pleiades_large.jpg')
material.side  = THREE.BackSide
//create the mesh based on geometry and material
var mesh  = new THREE.Mesh(geometry, material);
scene.add(mesh);


// Create country objects with all the necessary info from wiki and world bank to run the app
CreateYearsArray();
console.log(years);
createObjects();


function CreateSphere(country){

	if (currentCountries.indexOf(country) == -1){

		if (ready){
	
				console.log('numberbefore', number);
				for(var i =0; i<countries.length;i++){
					
					if (countries[i].name == country){
						index=i;
						if (countries[i].ind[currentIndicator][currentYear]!=null && countries[i].ind[currentIndicator][parseInt(currentYear-1).toString()]!=null){
						spheres.push(countries[i]);
						console.log("zyd");
						}
					}
				}

				if (countries[index].ind[currentIndicator][currentYear]!=null && countries[index].ind[currentIndicator][parseInt(currentYear-1).toString()]!=null){
				
					var sphereGeo = new THREE.SphereGeometry(radius, 100, 100);
					THREE.ImageUtils.crossOrigin = '';
					texture = THREE.ImageUtils.loadTexture(spheres[number].flagURL);

					material = new THREE.MeshPhongMaterial({
					    ambient: 0x808080,
					    map: texture,
					    specular: 0xFFFFFF,
					    shininess: 30,
					    shading: THREE.FlatShading

					});
									
					//create a new ball
					spheres[number].ball = new THREE.Mesh(sphereGeo, material);
					//add data to the data arrays based on country chosen
					dataArray.push(spheres[number].ind[currentIndicator][currentYear]);
					dataArray1.push(spheres[number].ind[currentIndicator][parseInt(currentYear-1).toString()]);
					change.push((spheres[number].ind[currentIndicator][currentYear]-spheres[number].ind[currentIndicator][parseInt(currentYear-1).toString()])/spheres[number].ind[currentIndicator][parseInt(currentYear-1).toString()]);
					currentCountries.push(country);
					//give the sphere a random x position
					spheres[number].physics.p.x=Math.floor((Math.random() * 500) -260);
					spheres[number].physics.p.y=0;
					console.log(spheres[number].ball.position.x);

					//add the newly created ball to the scene
					scene.add(spheres[number].ball);
					console.log('spheres:', spheres);
					console.log('current countries:', currentCountries);

					//increment the current number of spheres by 1
					number++;
					console.log('number after', number);
			}
			else{
				console.log('null value')
			}

			if(animate2 || animate3){
				animate3=false;
				animate2=false;
				for(var i =0;i<spheres.length;i++){
					spheres[i].physics.p.x=Math.floor((Math.random() * 500) -260);
					spheres[i].physics.p.y=0;
				}

			}



		}
	}	
};

// $('#indicator').click(function(){
//  		console.log("Clicked Indicator button")
//  		if (ready){
//  			if (currentIndicator=='GDP PPP'){
//  				currentIndicator = 'GDP PPP per capita';
//  			}
//  			else if (currentIndicator == 'GDP PPP per capita'){
//  				currentIndicator = 'GDP PPP'
//  			}
//  		}
//  		update();

$("#GDPPPP").click(function(){
 		console.log("Clicked Indicator button")
 		if (ready){
 			currentIndicator='GDP PPP';
 			G = 0.0001;
 			update();			
 		}
 		
});
$('#Unemployment').click(function(){
 		console.log("Clicked Indicator button")
 		if (ready){
 			currentIndicator='Unemployment';
 			G=10000000;
 			update();
 		}
});

$('#GDPPPPpercapita').click(function(){
 		console.log("Clicked Indicator button")
 		if (ready){
 			currentIndicator='GDP PPP per capita';
 			G = 5000;
 			update();
 		}
});
$('#TotalPopulation').click(function(){
 		console.log("Clicked Indicator button")
 		if (ready){
 			currentIndicator='Total Population';
 			G=3;
 		update();
 		}
});
$('#ForeignDirectInvestment').click(function(){
 		console.log("Clicked Indicator button")
 		if (ready){
 			currentIndicator='Foreign Direct Investment';
 			G=0.06;
 		update();
 		}
});
$('#CO2Emissions').click(function(){
 		console.log("Clicked Indicator button")
 		if (ready){
 			currentIndicator='CO2 Emissions';
 			G=39000000;
 		update();
 		}
});
$('#UrbanPopulationProportion').click(function(){
 		console.log("Clicked Indicator button")
 		if (ready){
 			currentIndicator='Urban Population Proportion';
 			G=3000000;
 		update();
 		}
});

$('#LifeExpectancy').click(function(){
 		console.log("Clicked Indicator button")
 		if (ready){
 			currentIndicator='Life Expectancy';
 			G=3000000;
 		update();
 		}
});
// $('#Landarea').click(function(){
//  		console.log("Clicked Indicator button")
//  		if (ready){
//  			currentIndicator='Land Area';
//  		update();
//  		}
// });
// $('#WomeninParliamentProportion').click(function(){
//  		console.log("Clicked Indicator button")
//  		if (ready){
//  			currentIndicator='Proportion of seats held by women in national parliaments (%)';
//  		update();
//  		}
// });

$('#radius').click(function(){
 		console.log("Clicked Proportionality button")
 		if (ready){
 			currentSizeMode='radius'
 		}
 });
$('#volume').click(function(){
 		console.log("Clicked Proportionality button")
 		if (ready){
 			currentSizeMode='volume'
 		}
 });
$( "#yearInput" ).autocomplete({
  				source: years,
  				autoFocus: true,
  				select: function( event, ui ) {
  					console.log('Attempted to change year')
  					if (ready){
	  					if ($('#yearInput').val()>1959 && $('#yearInput').val()<2014){
	  						var g = 0;
	  						for (var i=0;i<spheres.length;i++){
	  							if (spheres[i].ind[currentIndicator][$('#yearInput').val()] == null || spheres[i].ind[currentIndicator][parseInt($('#yearInput').val()-1).toString()] ==null){
	  								g++;
								}

	  						}
	  						if(g==0){
		  					currentYear = $('#yearInput').val();
		  					console.log(currentYear)
		 					update();
		 					$(this).val('');
		 					return false;
		 				}
	  					}
	  				}
	  				$('#yearInput').val('');
	  			}	
			});
$('#reposition').click(function(){
 		console.log("Clicked Year button")
 		if (ready){
 			for(var i =0;i<spheres.length;i++){
					spheres[i].physics.p.x=Math.floor((Math.random() * 500) -260);
					spheres[i].physics.p.y=0;
				}
		}
	 	camera.position.x=0;
	 	camera.position.y=0;
	 	camera.position.y=800;
	 	camera.quaternion._w=1;
	 	camera.quaternion._x=0;
	 	camera.quaternion._y=0;
	 	camera.quaternion._z=0;
	 	camera.rotation.x=0;
	 	camera.rotation.x=0;
	 	camera.rotation.x=0;

});

$('#year').click(function(){
 		console.log("Clicked Year button")
 		if (ready){
	 		if ($('#yearInput').val()>1959 && $('#yearInput').val()<2014){
	 			currentYear = $('#yearInput').val();
	 			update();
	 		}
 		
 		}
 		$("#yearInput").val("");
});

function update(){
		for (i=0;i<currentCountries.length;i++){

		if(currentCountries[i]==spheres[i].name)
			dataArray[i]=spheres[i].ind[currentIndicator][currentYear];
			dataArray1[i]=spheres[i].ind[currentIndicator][parseInt(currentYear-1).toString()];
			console.log('change value:',(spheres[i].ind[currentIndicator][currentYear]-spheres[i].ind[currentIndicator][parseInt(currentYear-1).toString()])/spheres[i].ind[currentIndicator][parseInt(currentYear-1).toString()]);
			change[i] = (spheres[i].ind[currentIndicator][currentYear]-spheres[i].ind[currentIndicator][parseInt(currentYear-1).toString()])/spheres[i].ind[currentIndicator][parseInt(currentYear-1).toString()];
	}
	console.log('updated!')
}

var resize = function() {
	var width = canvas.clientWidth;
	var height = canvas.clientHeight;
	if (canvas.width != width || canvas.height != height) {
		renderer.setSize(canvas.clientWidth, canvas.clientHeight, false);
		//don't fucking update the style. Why does three.js fight CSS? It should respect CSS :(
		camera.aspect = canvas.clientWidth / canvas.clientHeight;
		camera.updateProjectionMatrix();
	}
};

var render = function() {
	controls.update();
	requestAnimationFrame(render);
	resize();
	renderer.render(scene, camera);

	for (i=0;i<spheres.length;i++){

		spheres[i].ball.position.x = spheres[i].physics.p.x;
		spheres[i].ball.position.y = spheres[i].physics.p.y;
	}

	for(var j=0;j<spheres.length;j++){

		if(currentSizeMode=='radius'){
			spheres[j].ball.scale.x = radius*(dataArray[j]/Math.max.apply( Math, dataArray ));
			spheres[j].ball.scale.y = radius*(dataArray[j]/Math.max.apply( Math, dataArray ));
			spheres[j].ball.scale.z = radius*(dataArray[j]/Math.max.apply( Math, dataArray ));
		}
		else if(currentSizeMode=='volume'){
			spheres[j].ball.scale.x = radius*Math.pow((dataArray[j]/Math.max.apply( Math, dataArray )), 1/3);
			spheres[j].ball.scale.y = radius*Math.pow((dataArray[j]/Math.max.apply( Math, dataArray )), 1/3);
			spheres[j].ball.scale.z = radius*Math.pow((dataArray[j]/Math.max.apply( Math, dataArray )), 1/3);
		}

		
		if(currentYear>1960 && currentYear<2014){
			spheres[j].ball.rotation.x+=0.1*change[j]/Math.max.apply( Math, change );
			spheres[j].ball.rotation.y+=0.1*change[j]/Math.max.apply( Math, change );
		}
		
	}

	if (animate2){

	// Calculate half-integer acceleration values (using equations 18 through 21) in preparation for using equation 23:

	//m1_half.a.x = G * m2_half.m * (m2_half.p.x - m1_half.p.x) / alpha(m1_half, m2_half) + G * m3_half.m * (m3_half.p.x - m1_half.p.x) / beta(m1_half, m3_half); // Equation 42.
   	spheres[0].half.a.x = G * spheres[1].ind[currentIndicator][currentYear] * (spheres[1].half.p.x - spheres[0].half.p.x) / alpha(spheres[0].half, spheres[1].half);
   	console.log(spheres[0].half.a.x);
   // m1_half.a.y = G * m2_half.m * (m2_half.p.y - m1_half.p.y) / alpha(m1_half, m2_half) + G * m3_half.m * (m3_half.p.y - m1_half.p.y) / beta(m1_half, m3_half); // Equation 43.
    spheres[0].half.a.y = G * spheres[1].ind[currentIndicator][currentYear] * (spheres[1].half.p.y - spheres[0].half.p.y) / alpha(spheres[0].half, spheres[1].half);

    //m2_half.a.x = G * m1_half.m * (m1_half.p.x - m2_half.p.x) / alpha(m1_half, m2_half) + G * m3_half.m * (m3_half.p.x - m2_half.p.x) / gamma(m2_half, m3_half); // Equation 44.
    spheres[1].half.a.x = G * spheres[0].ind[currentIndicator][currentYear] * (spheres[0].half.p.x - spheres[1].half.p.x) / alpha(spheres[0].half, spheres[1].half);

    //m2_half.a.y = G * m1_half.m * (m1_half.p.y - m2_half.p.y) / alpha(m1_half, m2_half) + G * m3_half.m * (m3_half.p.y - m2_half.p.y) / gamma(m2_half, m3_half); // Equation 45.
    spheres[1].half.a.y = G * spheres[0].ind[currentIndicator][currentYear] * (spheres[0].half.p.y - spheres[1].half.p.y) / alpha(spheres[0].half, spheres[1].half);

   

     // Calculate velocity values using equation 23:


	//m1.v.x = equation23(m1.v.x, m1_half.a.x);
	spheres[0].physics.v.x = equation23(spheres[0].physics.v.x, spheres[0].half.a.x);
	console.log(spheres[0].physics.v.x);
    //m1.v.y = equation23(m1.v.y, m1_half.a.y);
	spheres[0].physics.v.y = equation23(spheres[0].physics.v.y, spheres[0].half.a.y);

    //m2.v.x = equation23(m2.v.x, m2_half.a.x);
	spheres[1].physics.v.x = equation23(spheres[1].physics.v.x, spheres[1].half.a.x);

    //m2.v.y = equation23(m2.v.y, m2_half.a.y);
    spheres[1].physics.v.y = equation23(spheres[1].physics.v.y, spheres[1].half.a.y);


   	
   	// Calculate position values using equation 24:

   	//m1.p.x = equation24(m1_half.p.x, m1.v.x);
   	spheres[0].physics.p.x = equation24(spheres[0].half.p.x,spheres[0].physics.v.x);
    //m1.p.y = equation24(m1_half.p.y, m1.v.y);
    spheres[0].physics.p.y = equation24(spheres[0].half.p.y,spheres[0].physics.v.y);

    //m2.p.x = equation24(m2_half.p.x, m2.v.x);
    spheres[1].physics.p.x = equation24(spheres[1].half.p.x,spheres[1].physics.v.x);
    
    //m2.p.y = equation24(m2_half.p.y, m2.v.y);
    spheres[1].physics.p.y = equation24(spheres[1].half.p.y,spheres[1].physics.v.y);

	// Calculate half-integer position values using equation 22:

	//m1_half.p.x = equation22(m1.p.x, m1.v.x);
	spheres[0].half.p.x = equation22(spheres[0].physics.p.x, spheres[0].physics.v.x);
	console.log(spheres[0].half.p.x);
    //m1_half.p.y = equation22(m1.p.y, m1.v.y);
    spheres[0].half.p.y = equation22(spheres[0].physics.p.y, spheres[0].physics.v.y);
    //m2_half.p.x = equation22(m2.p.x, m2.v.x);
    spheres[1].half.p.x = equation22(spheres[1].physics.p.x, spheres[1].physics.v.x);
    //m2_half.p.y = equation22(m2.p.y, m2.v.y);
    spheres[1].half.p.y = equation22(spheres[1].physics.p.y, spheres[1].physics.v.y);
   

    	if (spheres[0].physics.p.x==spheres[1].physics.p.x && spheres[0].physics.p.y==spheres[1].physics.p.y){
    		spheres[0].physics.p.a=0;
    		spheres[1].physics.p.a=0;
    		console.log('collision')

    	}
	
    for (i=0;i<spheres.length;i++){

		spheres[i].ball.position.x = spheres[i].physics.p.x;
		spheres[i].ball.position.y = spheres[i].physics.p.y;
	}

	}

	if (animate3){

	// Calculate half-integer acceleration values (using equations 18 through 21) in preparation for using equation 23:

	//m1_half.a.x = G * m2_half.m * (m2_half.p.x - m1_half.p.x) / alpha(m1_half, m2_half) + G * m3_half.m * (m3_half.p.x - m1_half.p.x) / beta(m1_half, m3_half); // Equation 42.
   	spheres[0].half.a.x = G * spheres[1].ind[currentIndicator][currentYear] * (spheres[1].half.p.x - spheres[0].half.p.x) / alpha(spheres[0].half, spheres[1].half) + G * spheres[2].ind[currentIndicator][currentYear] * (spheres[2].half.p.x - spheres[0].half.p.x) / beta(spheres[0].half, spheres[2].half);
   	console.log(spheres[0].half.a.x);
   // m1_half.a.y = G * m2_half.m * (m2_half.p.y - m1_half.p.y) / alpha(m1_half, m2_half) + G * m3_half.m * (m3_half.p.y - m1_half.p.y) / beta(m1_half, m3_half); // Equation 43.
    spheres[0].half.a.y = G * spheres[1].ind[currentIndicator][currentYear] * (spheres[1].half.p.y - spheres[0].half.p.y) / alpha(spheres[0].half, spheres[1].half) + G * spheres[2].ind[currentIndicator][currentYear] * (spheres[2].half.p.y - spheres[0].half.p.y) / beta(spheres[0].half, spheres[2].half);

    //m2_half.a.x = G * m1_half.m * (m1_half.p.x - m2_half.p.x) / alpha(m1_half, m2_half) + G * m3_half.m * (m3_half.p.x - m2_half.p.x) / gamma(m2_half, m3_half); // Equation 44.
    spheres[1].half.a.x = G * spheres[0].ind[currentIndicator][currentYear] * (spheres[0].half.p.x - spheres[1].half.p.x) / alpha(spheres[0].half, spheres[1].half) + G * spheres[2].ind[currentIndicator][currentYear] * (spheres[2].half.p.x - spheres[1].half.p.x) / gamma(spheres[1].half, spheres[2].half);

    //m2_half.a.y = G * m1_half.m * (m1_half.p.y - m2_half.p.y) / alpha(m1_half, m2_half) + G * m3_half.m * (m3_half.p.y - m2_half.p.y) / gamma(m2_half, m3_half); // Equation 45.
    spheres[1].half.a.y = G * spheres[0].ind[currentIndicator][currentYear] * (spheres[0].half.p.y - spheres[1].half.p.y) / alpha(spheres[0].half, spheres[1].half) + G * spheres[2].ind[currentIndicator][currentYear] * (spheres[2].half.p.y - spheres[1].half.p.y) / gamma(spheres[1].half, spheres[2].half);

    //m3_half.a.x = G * m1_half.m * (m1_half.p.x - m3_half.p.x) / beta(m1_half, m3_half)  + G * m2_half.m * (m2_half.p.x - m3_half.p.x) / gamma(m2_half, m3_half); // Equation 46.
    spheres[2].half.a.x = G * spheres[0].ind[currentIndicator][currentYear] * (spheres[0].half.p.x - spheres[2].half.p.x) / beta(spheres[0].half, spheres[2].half) + G * spheres[1].ind[currentIndicator][currentYear] * (spheres[1].half.p.x - spheres[2].half.p.x) / gamma(spheres[1].half, spheres[2].half);

   // m3_half.a.y = G * m1_half.m * (m1_half.p.y - m3_half.p.y) / beta(m1_half, m3_half)  + G * m2_half.m * (m2_half.p.y - m3_half.p.y) / gamma(m2_half, m3_half); // Equation 47.
	spheres[2].half.a.y = G * spheres[0].ind[currentIndicator][currentYear] * (spheres[0].half.p.y - spheres[2].half.p.y) / beta(spheres[0].half, spheres[2].half) + G * spheres[1].ind[currentIndicator][currentYear] * (spheres[1].half.p.y - spheres[2].half.p.y) / gamma(spheres[1].half, spheres[2].half);


     // Calculate velocity values using equation 23:


	//m1.v.x = equation23(m1.v.x, m1_half.a.x);
	spheres[0].physics.v.x = equation23(spheres[0].physics.v.x, spheres[0].half.a.x);
	
    //m1.v.y = equation23(m1.v.y, m1_half.a.y);
	spheres[0].physics.v.y = equation23(spheres[0].physics.v.y, spheres[0].half.a.y);

    //m2.v.x = equation23(m2.v.x, m2_half.a.x);
	spheres[1].physics.v.x = equation23(spheres[1].physics.v.x, spheres[1].half.a.x);

    //m2.v.y = equation23(m2.v.y, m2_half.a.y);
    spheres[1].physics.v.y = equation23(spheres[1].physics.v.y, spheres[1].half.a.y);

    //m3.v.x = equation23(m3.v.x, m3_half.a.x);
   	spheres[2].physics.v.x = equation23(spheres[2].physics.v.x, spheres[2].half.a.x);

    //m3.v.y = equation23(m3.v.y, m3_half.a.y);
   	spheres[2].physics.v.y = equation23(spheres[2].physics.v.y, spheres[2].half.a.y);

   	
   	// Calculate position values using equation 24:

   	//m1.p.x = equation24(m1_half.p.x, m1.v.x);
   	spheres[0].physics.p.x = equation24(spheres[0].half.p.x,spheres[0].physics.v.x);

    //m1.p.y = equation24(m1_half.p.y, m1.v.y);
    spheres[0].physics.p.y = equation24(spheres[0].half.p.y,spheres[0].physics.v.y);

    //m2.p.x = equation24(m2_half.p.x, m2.v.x);
    spheres[1].physics.p.x = equation24(spheres[1].half.p.x,spheres[1].physics.v.x);
    
    //m2.p.y = equation24(m2_half.p.y, m2.v.y);
    spheres[1].physics.p.y = equation24(spheres[1].half.p.y,spheres[1].physics.v.y);
    
    //m3.p.x = equation24(m3_half.p.x, m3.v.x);
    spheres[2].physics.p.x = equation24(spheres[2].half.p.x,spheres[2].physics.v.x);
    
    //m3.p.y = equation24(m3_half.p.y, m3.v.y);
    spheres[2].physics.p.y = equation24(spheres[2].half.p.y,spheres[2].physics.v.y);

	// Calculate half-integer position values using equation 22:

	//m1_half.p.x = equation22(m1.p.x, m1.v.x);
	spheres[0].half.p.x = equation22(spheres[0].physics.p.x, spheres[0].physics.v.x);
    //m1_half.p.y = equation22(m1.p.y, m1.v.y);
    spheres[0].half.p.y = equation22(spheres[0].physics.p.y, spheres[0].physics.v.y);
    //m2_half.p.x = equation22(m2.p.x, m2.v.x);
    spheres[1].half.p.x = equation22(spheres[1].physics.p.x, spheres[1].physics.v.x);
    //m2_half.p.y = equation22(m2.p.y, m2.v.y);
    spheres[1].half.p.y = equation22(spheres[1].physics.p.y, spheres[1].physics.v.y);
    //m3_half.p.x = equation22(m3.p.x, m3.v.x);
    spheres[2].half.p.x = equation22(spheres[2].physics.p.x, spheres[2].physics.v.x);
    //m3_half.p.y = equation22(m3.p.y, m3.v.y);
    spheres[2].half.p.y = equation22(spheres[2].physics.p.y, spheres[2].physics.v.y);

    	if (spheres[0].physics.p.x==spheres[1].physics.p.x && spheres[0].physics.p.y==spheres[1].physics.p.y){
    		spheres[0].physics.p.a=0;
    		spheres[1].physics.p.a=0;
    		console.log('collision')

    	}
    	if (spheres[0].physics.p.x==spheres[2].physics.p.x && spheres[0].physics.p.y==spheres[2].physics.p.y){
    		spheres[0].physics.p.a=0;
    		spheres[2].physics.p.a=0;
    		console.log('collision')

    	}
    	if (spheres[1].physics.p.x==spheres[2].physics.p.x && spheres[1].physics.p.y==spheres[2].physics.p.y){
    		spheres[1].physics.p.a=0;
    		spheres[2].physics.p.a=0;
    		console.log('collision')

    	}
	
    for (i=0;i<spheres.length;i++){

		spheres[i].ball.position.x = spheres[i].physics.p.x;
		spheres[i].ball.position.y = spheres[i].physics.p.y;
	}

	}	
};

render();

$( "#theInput" ).autocomplete({
  				source: countryNames,
  				autoFocus: true,
  				select: function( event, ui ) {
  					console.log('Selected autocomplete');
  					if ($('#theInput').val().length>3 && ready && number<10 && currentCountries.indexOf($('#theInput').val()) == -1){
	  					var countryName = $('#theInput').val();
	 					CreateSphere(countryName);
	 					//$('#countrybox').append($('<div id="countryadd1"><button id="countryinfo">'+$('#theInput').val()+'</button></div>'));
	 					$(this).val('');
	 					return false;
	 				}
	 			$('#theInput').val('');
  				}
			});

// $('#delButton').click(function(){
// 	console.log('clickeddelbutton');
// 	$('#countryadd1').remove();
// });

// $('#addButton').click(function(){
// 	console.log('clickeddelbutton');
// 	$('#countryadd1').remove();
// });

// $('#addButton').click(function(){
// 		$('#countrybox').append($('<div id="countryadd"><button id="countryinfo">'+$('#theInput').val()+'</button><button id="delButton">-</button></div>'));
//  		console.log("Clicked Add button")
//  		if (ready){
//  		if ($('#theInput').val().length>3){
//  			var countryName = $('#theInput').val();

//  			CreateSphere(countryName);
//  		}
 		
//  		}
//  		$("#theInput").val("");
// });

$('#logstuff').click(function(){
	for (i=0;i<spheres.length;i++){
		console.log('Logging Stuff:');
		console.log('Position x:',spheres[i].ball.position.x);
		console.log('Position y:',spheres[i].ball.position.y);
		console.log('Position z:',spheres[i].ball.position.z);
		console.log('Sphere', spheres[i]);
		console.log('rotation',0.1*change[i]/Math.max.apply( Math, change ));
	}
	console.log('Camera coordinates', camera.position.x,camera.position.y,camera.position.z);
});

$(document).keypress(function(e) {
    if(e.which == 13) {

    console.log("Clicked Enter")
 		if ($('#theInput').val().length>3 && ready && number<10 && currentCountries.indexOf($('#theInput').val()) == -1){
 			var countryName = convertCountryNames($('#theInput').val());
 			//$('#countrybox').append($('<div id="countryadd1"><button id="countryinfo">'+$('#theInput').val()+'</button></div>'));
 			CreateSphere(countryName);
 		}
 	$("#theInput").val("");
 	}

 	 if(e.which == 96) {
	 	console.log("Clicked backspace")
	 	if (number>0){
		 	if (ready){
			 	console.log(spheres.slice(-1).pop());
			 	scene.remove(spheres.slice(-1).pop().ball);

			 	spheres.pop();
			 	dataArray.pop();
			 	dataArray1.pop();
			 	change.pop();
			 	currentCountries.pop();
			 	console.log(spheres.slice(0,1));
			 	console.log(spheres);
			 	number -=1;
			 	
			 	if(animate3||animate2){
					animate3=false;
					animate2=false;
					for(var i =0;i<spheres.length;i++){
						spheres[i].physics.p.x=Math.floor((Math.random() * 500) -260);
						spheres[i].physics.p.y=0;
					}

				}
		 	}
	 	}
 	}
});

$('#deleteButton').click(function(){
	console.log("Clicked delete")
	if (number>0){
 	
	 	if (ready){
		 	console.log(spheres.slice(-1).pop());
		 	scene.remove(spheres.slice(-1).pop().ball);
		 

		 	spheres.pop();
		 	dataArray.pop();
		 	dataArray1.pop();
		 	change.pop();
		 	currentCountries.pop();
		 	console.log(spheres.slice(0,1));
		 	console.log(spheres);
		 	number -=1;
		 	
		 	if(animate3||animate2){
				animate3=false;
				animate2=false;
				for(var i =0;i<spheres.length;i++){
					spheres[i].physics.p.x=Math.floor((Math.random() * 500) -260);
					spheres[i].physics.p.y=0;
				}

			}
		$('#countryadd1').remove();
	 	}
 }
});

function correctCountryNames(countryNames){

	for (var i =0; i<countryNames.length;i++){
		if (countryNames[i].name=='olivia'){
			countryNames[i].name='Bolivia';
		}
		else if(countryNames[i].name=='ast Timor'){
				countryNames[i].name='East Timor';
		}
		else if(countryNames[i].name=='The Gambia'){
				countryNames[i].name='Gambia';
		}
		else if(countryNames[i].name=='nt Vincent and the Grenadines'){
				countryNames[i].name='Saint Vincent and the Grenadines';
		}
		else if(countryNames[i].name=='eru'){
				countryNames[i].name='Peru';
		}

	}
};

function correctCountryName(countryName){

	var countryName1 = countryName;
		if (countryName1=='olivia'){
			countryName1='Bolivia';
		}
		else if(countryName1=='ast Timor'){
				countryName1='East Timor';
		}
		else if(countryName1=='The Gambia'){
				countryName1='Gambia';
		}
		else if(countryName1=='nt Vincent and the Grenadines'){
				countryName1='Saint Vincent and the Grenadines';
		}
		else if(countryName1=='eru'){
				countryName1='Peru';
		}

	return countryName1;
};

function convertCountryNames(country){
	var country;
	if (country == 'Slovakia'){
		country = 'Slovak Republic';
		return country;
	}
	if (country == 'Macedonia'){
		country = 'Macedonia, FYR';
		return country;
	}
	if (country == 'Slovakia'){
		country = 'Slovak Republic';
		return country;
	}
	if (country == 'State of Palestine'){
		country = 'West Bank and Gaza';
		return country;
	}
	if (country == 'Yemen'){
		country = 'Yemen, Rep.';
		return country;
	}
	if (country == 'Gambia'){
		country = 'Gambia, The';
		return country;
	}
	if (country == 'Iran'){
		country = 'Iran, Islamic Rep.';
		return country;
	}		
	if (country == 'Bahamas'){
		country = 'Bahamas, The';
		return country;
	}
	if (country == 'Brunei'){
		country = 'Brunei Darussalam';
		return country;
	}
	if (country == 'Burma'){
		country = 'Myanmar';
		return country;
	}
	if (country == 'Egypt'){
		country = 'Egypt, Arab Rep.';
		return country;
	}
	if (country == 'Bahamas'){
		country = 'Bahamas, The';
		return country;
	}
	else if(country == 'South Korea'){
		country = 'Korea, Rep.';
		return country;
	}
	else if(country == 'North Korea'){
		country = 'Korea, Dem. Rep.';
		return country;
	}
	else if(country == 'Russia'){
		country = 'Russian Federation';
		return country;
	}
	else if(country == 'Cape Verde'){
		country = 'Cabo Verde';
		return country;
	}
	else if(country == 'Saint Kitts and Nevis'){
		country = 'St. Kitts and Nevis';
		return country;
	}
	else if(country == 'Saint Lucia'){
		country = 'St. Lucia';
		return country;
	}
	else if(country == 'Saint Vincent and the Grenadines'){
		country = 'St. Vincent and the Grenadines';
		return country;
	}
	else if(country == 'Syria'){
		country = 'Syrian Arab Republic';
		return country;
	}
	else if(country == 'East Timor'){
		country = 'Timor-Leste';
		return country;
	}
	else if(country == 'Federated States of Micronesia'){
		country = 'Micronesia, Fed. Sts.';
		return country;
	}
	else if(country == 'Laos'){
		country = 'Lao PDR';
		return country;
	}
	else if(country == 'Kyrgyzstan'){
		country = 'Kyrgyz Republic';
		return country;
	}
	else if(country == 'Ivory Coast'){
		country = "Cote d'Ivoire";
		return country;
	}
	else if(country == 'Kyrgyzstan'){
		country = 'Kyrgyz Republic';
		return country;
	}
	else if(country == 'Democratic Republic of the Congo'){
		country = 'Congo, Dem. Rep.';
		return country;
	}
	else if(country == 'Republic of the Congo'){
		country = 'Congo, Rep.';
		return country;
	}
	return country;
};

$('#animate1').click(function(){

	// G=0.00001*//BLABLABLA;
	console.log('clicked animate/deanimate button!');
	if(animate2){
		animate2=false;
		$(this).css('background-color','green');
		for(var i =0;i<spheres.length;i++){
			spheres[i].physics.p.x=Math.floor((Math.random() * 500) -260);
			spheres[i].physics.p.y=0;
		}
		return;
	}

	if (animate3){
		animate3=false;
		$(this).css('background-color','green');
		for(var i =0;i<spheres.length;i++){
			spheres[i].physics.p.x=Math.floor((Math.random() * 500) -260);
			spheres[i].physics.p.y=0;
		}
		return
	}

	else if(animate2==false && sphere.length ==2){

		$(this).css('background-color','red');

	if (spheres.length==2){

		spheres[0].physics.p.x = -100;
		console.log('kloc',spheres[0]);
		console.log('dalej w huj',spheres[0].physics.p);
		console.log('fe',spheres[0].physics.p.x);
		spheres[0].physics.p.y=0;
		spheres[0].physics.v.x=0;
		
		spheres[1].physics.p.x=100;
		spheres[1].physics.p.y=0;
		spheres[1].physics.v.x=0;
		spheres[1].physics.v.y=0;


		var speed0 = 0.5* Math.sqrt(G*spheres[1].ind[currentIndicator][currentYear]/Math.abs(spheres[0].physics.p.x-spheres[1].physics.p.x));
		var speed2 = -0.5 * Math.sqrt(G*spheres[0].ind[currentIndicator][currentYear]/Math.abs(spheres[1].physics.p.x-spheres[0].physics.p.x));

		spheres[0].physics.v.y = speed0;
		spheres[1].physics.v.y = speed2;

		// Calculate initial acceleration values (using initial conditions) in preparation for using equation 25:
		//m1.a.x = G * m2.m * (m2.p.x - m1.p.x) / alpha(m1, m2) + G * m3.m * (m3.p.x - m1.p.x) / beta(m1, m3); // Equation 42.
		spheres[0].physics.a.x = G * spheres[1].ind[currentIndicator][currentYear] * (spheres[1].physics.p.x - spheres[0].physics.p.x) / alpha(spheres[0].physics, spheres[1].physics); // Equation 42.
		
		spheres[0].physics.a.y = G * spheres[1].ind[currentIndicator][currentYear] * (spheres[1].physics.p.y - spheres[0].physics.p.y) / alpha(spheres[0].physics, spheres[1].physics); // Equation 43.
		// m2.a.x = G * m1.m * (m1.p.x - m2.p.x) / alpha(m1, m2) + G * m3.m * (m3.p.x - m2.p.x) / gamma(m2, m3); // Equation 44.
		spheres[1].physics.a.x = G * spheres[0].ind[currentIndicator][currentYear] * (spheres[0].physics.p.x - spheres[1].physics.p.x) / alpha(spheres[0].physics, spheres[1].physics);
		//m2.a.y = G * m1.m * (m1.p.y - m2.p.y) / alpha(m1, m2) + G * m3.m * (m3.p.y - m2.p.y) / gamma(m2, m3); // Equation 45.
		spheres[1].physics.a.y = G * spheres[0].ind[currentIndicator][currentYear] * (spheres[0].physics.p.y - spheres[1].physics.p.y) / alpha(spheres[0].physics, spheres[1].physics);
		

		
		// For the first iteration (and only the first iteration), use equation 25 (instead of equation 22) to calculate the initial half-integer position values:
		//m1_half.p.x = equation25(m1.p.x, m1.v.x, m1.a.x);
		spheres[0].half.p.x = equation25(spheres[0].physics.p.x, spheres[0].physics.v.x, spheres[0].physics.a.x);
		spheres[0].half.p.y = equation25(spheres[0].physics.p.y, spheres[0].physics.v.y, spheres[0].physics.a.y);
		spheres[1].half.p.x = equation25(spheres[1].physics.p.x, spheres[1].physics.v.x, spheres[1].physics.a.x);
		spheres[1].half.p.y = equation25(spheres[1].physics.p.y, spheres[1].physics.v.y, spheres[1].physics.a.y);

		animate2 = true;

	}

}
	else if (animate3 ==false && spheres.length==3){

		// $(this).css('background-color','green');

		spheres[0].physics.p.x = -100;
		console.log('kloc',spheres[0]);
		console.log('dalej w huj',spheres[0].physics.p);
		console.log('fe',spheres[0].physics.p.x);
		spheres[0].physics.p.y=0;
		spheres[0].physics.v.x=0;
		
		spheres[1].physics.p.x=0;
		spheres[1].physics.p.y=0;
		spheres[1].physics.v.x=0;
		spheres[1].physics.v.y=0;

		spheres[2].physics.p.x=100;
		spheres[2].physics.p.y=0;
		spheres[2].physics.v.x=0;

		var speed0 = Math.sqrt(G*(spheres[1].ind[currentIndicator][currentYear]/Math.abs(spheres[0].physics.p.x-spheres[1].physics.p.x) + spheres[2].ind[currentIndicator][currentYear]/Math.abs(spheres[2].physics.p.x-spheres[0].physics.p.x)));
		var speed2 = -Math.sqrt(G*(spheres[1].ind[currentIndicator][currentYear]/Math.abs(spheres[2].physics.p.x-spheres[1].physics.p.x) + spheres[0].ind[currentIndicator][currentYear]/Math.abs(spheres[2].physics.p.x-spheres[0].physics.p.x))); 

		spheres[0].physics.v.y = speed0;
		spheres[2].physics.v.y = speed2;

		// Calculate initial acceleration values (using initial conditions) in preparation for using equation 25:
		//m1.a.x = G * m2.m * (m2.p.x - m1.p.x) / alpha(m1, m2) + G * m3.m * (m3.p.x - m1.p.x) / beta(m1, m3); // Equation 42.
		spheres[0].physics.a.x = G * spheres[1].ind[currentIndicator][currentYear] * (spheres[1].physics.p.x - spheres[0].physics.p.x) / alpha(spheres[0].physics, spheres[1].physics) + G * spheres[2].ind[currentIndicator][currentYear] * (spheres[2].physics.p.x - spheres[0].physics.p.x) / beta(spheres[0].physics, spheres[2].physics); // Equation 42.
		
		spheres[0].physics.a.y = G * spheres[1].ind[currentIndicator][currentYear] * (spheres[1].physics.p.y - spheres[0].physics.p.y) / alpha(spheres[0].physics, spheres[1].physics) + G * spheres[2].ind[currentIndicator][currentYear] * (spheres[2].physics.p.y - spheres[0].physics.p.y) / beta(spheres[0].physics, spheres[2].physics); // Equation 43.
		// m2.a.x = G * m1.m * (m1.p.x - m2.p.x) / alpha(m1, m2) + G * m3.m * (m3.p.x - m2.p.x) / gamma(m2, m3); // Equation 44.
		spheres[1].physics.a.x = G * spheres[0].ind[currentIndicator][currentYear] * (spheres[0].physics.p.x - spheres[1].physics.p.x) / alpha(spheres[0].physics, spheres[1].physics) + G * spheres[2].ind[currentIndicator][currentYear] * (spheres[2].physics.p.x - spheres[1].physics.p.x) / gamma(spheres[1].physics, spheres[2].physics);
		//m2.a.y = G * m1.m * (m1.p.y - m2.p.y) / alpha(m1, m2) + G * m3.m * (m3.p.y - m2.p.y) / gamma(m2, m3); // Equation 45.
		spheres[1].physics.a.y = G * spheres[0].ind[currentIndicator][currentYear] * (spheres[0].physics.p.y - spheres[1].physics.p.y) / alpha(spheres[0].physics, spheres[1].physics) + G * spheres[2].ind[currentIndicator][currentYear] * (spheres[2].physics.p.y - spheres[1].physics.p.y) / gamma(spheres[1].physics, spheres[2].physics);
		// m3.a.x = G * m1.m * (m1.p.x - m3.p.x) / beta(m1, m3)  + G * m2.m * (m2.p.x - m3.p.x) / gamma(m2, m3); // Equation 46.
		spheres[2].physics.a.x = G * spheres[0].ind[currentIndicator][currentYear] * (spheres[0].physics.p.x - spheres[2].physics.p.x) / beta(spheres[0].physics, spheres[2].physics) + G * spheres[1].ind[currentIndicator][currentYear] * (spheres[1].physics.p.x - spheres[2].physics.p.x) / gamma(spheres[1].physics, spheres[2].physics);
		//m3.a.y = G * m1.m * (m1.p.y - m3.p.y) / beta(m1, m3)  + G * m2.m * (m2.p.y - m3.p.y) / gamma(m2, m3); // Equation 47.
		spheres[2].physics.a.y = G * spheres[0].ind[currentIndicator][currentYear] * (spheres[0].physics.p.y - spheres[2].physics.p.y) / beta(spheres[0].physics, spheres[2].physics) + G * spheres[1].ind[currentIndicator][currentYear] * (spheres[1].physics.p.y - spheres[2].physics.p.y) / gamma(spheres[1].physics, spheres[2].physics);

		
		// For the first iteration (and only the first iteration), use equation 25 (instead of equation 22) to calculate the initial half-integer position values:
		//m1_half.p.x = equation25(m1.p.x, m1.v.x, m1.a.x);
		spheres[0].half.p.x = equation25(spheres[0].physics.p.x, spheres[0].physics.v.x, spheres[0].physics.a.x);
		spheres[0].half.p.y = equation25(spheres[0].physics.p.y, spheres[0].physics.v.y, spheres[0].physics.a.y);
		spheres[1].half.p.x = equation25(spheres[1].physics.p.x, spheres[1].physics.v.x, spheres[1].physics.a.x);
		spheres[1].half.p.y = equation25(spheres[1].physics.p.y, spheres[1].physics.v.y, spheres[1].physics.a.y);
		spheres[2].half.p.x = equation25(spheres[2].physics.p.x, spheres[2].physics.v.x, spheres[2].physics.a.x);
		spheres[2].half.p.y = equation25(spheres[2].physics.p.y, spheres[2].physics.v.y, spheres[2].physics.a.y);

		animate3 = true;
		console.log('first',spheres[0].physics.p.x, spheres[0].physics.v.x, spheres[0].physics.a.x,spheres[0].half.p.x);
		console.log('second',spheres[1].physics.p.x, spheres[1].physics.v.x, spheres[1].physics.a.x,spheres[1].half.p.x);
		console.log('third',spheres[2].physics.p.x, spheres[2].physics.v.x, spheres[2].physics.a.x,spheres[2].half.p.x);
	}
	else{
		animate3=false;
		animate2=false;
	}

});

// The denominators alpha, beta, and gamma for the acceleration equations 42 through 47:
function alpha(m1, m2) { // Equation 48.
  var delta_x = m2.p.x - m1.p.x;
  var delta_y = m2.p.y - m1.p.y;
  // console.log(m1.p.x);
  // console.log(spheres[0].physics.p.x);
  // console.log(delta_x,'delta x');
  var delta_x_squared = delta_x * delta_x;
  var delta_y_squared = delta_y * delta_y;

  var base = delta_x_squared + delta_y_squared;
  // console.log('result', Math.sqrt(base * base * base));
  return Math.sqrt(base * base * base); // Raise the base to the 3/2 power so as to calculate (x_2 - x_1 )^2 + (y_2 - y_1 )^2]^(3/2), equation 48.
};

function beta(m1, m3) { // Equation 49.
  var delta_x = m3.p.x - m1.p.x;
  var delta_y = m3.p.y - m1.p.y;
  
  var delta_x_squared = delta_x * delta_x;
  var delta_y_squared = delta_y * delta_y;

  var base = delta_x_squared + delta_y_squared;

  return Math.sqrt(base * base * base); // Raise the base to the 3/2 power so as to calculate (x3 - x1)^2 + (y3 - y1)^2 ]^(3/2), equation 49.
};

function gamma(m2, m3) { // Equation 50.
  var delta_x = m3.p.x - m2.p.x; 
  var delta_y = m3.p.y - m2.p.y;

  var delta_x_squared = delta_x * delta_x;
  var delta_y_squared = delta_y * delta_y;

  var base = delta_x_squared + delta_y_squared;

  return Math.sqrt(base * base * base); // Raise the base to the 3/2 power so as to calculate (x3 - x2)^2 + (y3 - y2)^2]^(3/2), equation 50.
};

function equation25(x, v, a) {
		   	return x + 0.5 * h * v + 0.25 * (h * h) * a;  // Equation 25.
};

function equation23(v, a) {
    return v + h * a; // Equation 23.
};

function equation24(x, v) {
    return x + 0.5 * h * v; // Equation 24.
};

function equation22(x, v) {
    return x + 0.5 * h * v; // Equation 22, this function is of course the same as the equation24(x, v) function.
};

